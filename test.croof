forall a : N => (a) = a

def + : N -> N -> N

forall a : N               => 0 + a = a
forall a : N, forall b : N => succ(a) + b = a + succ(b)

forall a : N, forall b : N => a + b = b + a
forall a : N, forall b : N, forall c : N => (a + b) + c = a + (b + c)

def * : N -> N -> N

forall a : N               => 0 * a = 0
forall a : N               => 1 * a = a
forall a : N, forall b : N => succ(a) * b = (a * b) + b

forall a : N, forall b : N => a * b = b * a
forall a : N, forall b : N, forall c : N => (a * b) * c = a * (b * c)
forall a : N, forall b : N, forall c : N => a * (b + c) = (a * b) + (a * c)

def ^ : N -> N -> N

forall a : N => a ^ 0 = 1
forall a : N => a ^ 1 = a
forall a : N, forall b : N => a ^ succ(b) = (a ^ b) * a

eval 1 + 1
eval 2 * 2
eval 1 + (1 * 2)
# eval 2 ^ 2
